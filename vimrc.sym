" vim: set nofoldenable: " Modeline to keep fold open by default in this file
"
"" [Don't add anything here that you don't understand!!!]
"" SOURCE MAIN CONFIG FILES - Order MATTERS
" Vim Load order for folders, autoload, plugins etc http://learnvimscriptthehardway.stevelosh.com/chapters/42.html


"" EXPERIMENTAL """"""""""""""""""""
" do not colorize buffer tab modified - chg tab color https://github.com/vim-airline/vim-airline/issues/553
"
"
"
if ! exists("is_ps")
	" let g:airline_detect_modified = 0
	" Patched the airline  stuff... TODO: FOrk it, or apply it properly
	" let g:airline_statusline_ontop = 1
endif

"^ is pretty great. It's not as awesome as down below (still some lag, but
"it's pretty dang good for a first quick try...


" Then define the MyTabLine() function to list all the tab pages labels.  A
" convenient method is to split it in two parts:  First go over all the tab
" pages and define labels for them.  Then get the label for each tab page. >
" FIXME: move this out?
function MyTabLine()
        let s = ''

        " echo len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
        let bufferCount = len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))

        " jamis add?
        " echo a:mode
        if v:insertmode == 'i'
        " if a:mode == 'i'
                let s .= '%#Airline_Tabmod#' . 'INSERT' . " "
        elseif v:insertmode == 'r'
                let s .= '%#Airline_error#' . 'REPLACE' . " "
        else
                let s .= "Normal" . " "
        endif

        for i in range(tabpagenr('$'))
                " select the highlighting
                if i + 1 == tabpagenr()
                        let s .= '%#TabLineSel#'
                else
                        let s .= '%#TabLine#'
                endif

                " set the tab page number (for mouse clicks)
                let s .= '%' . (i + 1) . 'T'

                " the label is made by MyTabLabel()
                let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
        endfor

        " after the last tab fill with TabLineFill and reset tab page nr
        let s .= '%#TabLineFill#%T'

        " add buffercount
        let s.= ' [' . bufferCount . ']'

        " right-align the label to close the current tab page
        if tabpagenr('$') > 1
                let s .= '%=%#TabLine#%999Xclose'
        endif

        return s
endfunction

" Now the MyTabLabel() function is called for each tab page to get its label. >

function MyTabLabel(n)

	" jamis add?
	" let s .= v:insertmode

	let buflist = tabpagebuflist(a:n)
	let winnr = tabpagewinnr(a:n)
	" return bufname(buflist[winnr - 1]) . v:insertmode
	return bufname(buflist[winnr - 1])
endfunction


" :set tabline=%!MyTabLine(v:insertmode)

" Then define the MyTabLine() function to list all the tab pages labels.  A
" convenient method is to split it in two parts:  First go over all the tab
" pages and define labels for them.  Then get the label for each tab page. >
"

""""" [END EXPERIMENTAL] """""""""""

" WHYYYYYY do we have to put this here. It's stupid. Because of the lame tag
" search stack stuff...
nnoremap <C-T> :TroubleToggle<CR>

"
" TODO: Consider adding these to a vimscript LIST, and then using those to
" popluate <leader>e, and sourcing them all
" When you add one here, add it to fzf list in keys.vim
" ORDER MATTERS -  Vim Load order for folders, autoload, plugins etc http://learnvimscriptthehardway.stevelosh.com/chapters/42.html
"
source $HOME/.vim/vimrc/plugin-list.lua " Using Packer (Lua) for my plugins now... TODO: start migrating over to this
source $HOME/.vim/vimrc/keys.lua " New start for keys
" THEN, create a new plugin-settings based on functionality... (when it gets
" big enough to warrant a split)

" Plugin config split by area / UI feature
source $HOME/.vim/vimrc/autocomplete.lua " Autocomplete

source $HOME/.vim/vimrc/plugin-list.vim " All the plugins
source $HOME/.vim/vimrc/plugin-settings.vim " Plugin settings
source $HOME/.vim/vimrc/settings.vim " General VIM / UI Settings
source $HOME/.vim/vimrc/keys.vim " Key bindings for Vim and Vim Plugins
source $HOME/.vim/vimrc/command-funcs.vim " (Auto-)Commands, Custom functions

source $HOME/.vim/vimrc/init.lua " (Auto-)Commands, Custom functions
" $HOME/.vim/vimrc/notes-todo.md " Notes and TODO

" Mapped keys from colemak file...
" $HOME/.vim/after/plugins/colemak.vim
"
